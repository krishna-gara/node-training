
callBack();
console.log("test");
console.log("test1");
console.log("test2");
console.log("1-test");
console.log("1-test1");
console.log("1-test2");
console.log("1-test3");

function callBack() {
  	let hellvar = "test3";
  	console.log(hellvar);
    function callback1(){
    	console.log(hellvar);
    }
    callback1();
}

//const var1 = "test";
//console.log(hellvar);

var arr = [1,2,4];
arr.forEach(ele => console.log(ele));

var test = "test";

var str = `sadfasdf asdf asdf asdf ${test}`;

console.log(str);

var obj = [1,3,4, 4];
[var1, var2, var3, var4] = obj;

console.log(var1, var2, var3, var4);

// set
var setex = new Set();
setex.add(1);
setex.add(10);
setex.add(10);
console.log(setex.has(20));
console.log(...setex);

// 
 
var mapex = new Map();
mapex.set("test", 10);
mapex.set("test1", 20);
console.log(mapex.get('test'));
//scope 

class NewClas {
  
  constructor(param1, param2) {
	   this.param1 = param1;
	   this.param2 = param2;
  }
  
  method1(){
  	console.log("method calling " + this.param2);
  } 

}

function(){

	sdfad,
	function (){
	
	}

}

var obj2 =  new NewClas(10, 20);

console.log(obj2.method1());

function testingDefault(param1, param2 = 2){

   console.log(param1,param2);

}

testingDefault(2);

function restparam(p1,p2,p3){
	console.log(p1,p2,p3)
}

restparam(...[1,2,3]);

for( var n of [1,2,3]){
	console.log(n);
}

for( var n in [1,2,3]){
	console.log(n);
}

function add(n1, n2){

	let p = new Promise(function(resolve, reject){
  
    if(n1 > 5) {
    		
       resolve(n1+n2);
    } else 
      reject("Error");  
  });

	return p;

}
add(6, 10)
.then((result)=> { console.log(result)}).catch(err=>{
console.log("error");
});

Promise.all([add(7, 10), add(3, 16), add(6, 16)]).
then((result)=> {

console.log(result[0]);
console.log(result[1]);
console.log(result[2]);

}).catch(()=>{})


Promise.race([add(7, 10), add(3, 16), add(6, 16)]).
then((result)=> {

console.log(result);

}).catch(()=>{})


//es6
// 1. arrow functions
// 2. string interpolation / template string
// 3. let and const 
// 4. destructing
// 5. classes and modules
// 6. Default 
// 7. Rest, spread 
// 8. for..in / for..of
// 9. promises  all/race 


need to dicssuss
// callback/promise/async-await


